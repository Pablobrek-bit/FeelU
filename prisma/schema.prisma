generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid()) @db.Uuid
  email     String    @unique
  password  String
  role      Role      @default(USER)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  deleted   Boolean?  @default(false)
  profile   Profile?
  Filter    Filter?
  Like      Like[]
  Match     Match[]

  @@index([deleted], name: "idx_users_deleted")
  @@map("users")
}

model Profile {
  id                    String            @id @default(uuid()) @db.Uuid
  userId                String            @unique @db.Uuid
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                  String
  age                   Int
  course                String?
  institution           String?
  bio                   String
  avatarUrl             String            @map("avatar_url")
  instagramUrl          String?           @map("instagram_url")
  favoriteEmoji         String?           @map("favorite_emoji")
  gender                Gender
  sexualOrientation     SexualOrientation @map("sexual_orientation")
  showGender            Boolean           @default(true) @map("show_gender")
  showSexualOrientation Boolean           @default(true) @map("show_sexual_orientation")
  deletedAt             DateTime?         @map("deleted_at")
  deleted               Boolean?          @default(false)

  @@index([gender, sexualOrientation], name: "idx_profiles_filter")
  @@index([deleted], name: "idx_profiles_deleted")
  @@map("profiles")
}

model Filter {
  id          String             @id @default(uuid()) @db.Uuid
  userId      String             @unique @db.Uuid
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  preferences FilterPreference[]

  @@index([userId], name: "idx_filters_user_id")
  @@map("filters")
}

model FilterPreference {
  id                String            @id @default(uuid()) @db.Uuid
  filterId          String            @db.Uuid
  filter            Filter            @relation(fields: [filterId], references: [id], onDelete: Cascade)
  gender            Gender
  sexualOrientation SexualOrientation

  @@index([filterId], name: "idx_filter_preferences_filter_id")
  @@map("filter_preferences")
}

model Like {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likedUser String   @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")

  @@index([likedUser], name: "idx_likes_liked_user")
  @@map("likes")
}

model Match {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  matchedUser String   @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")

  @@index([matchedUser], name: "idx_matches_matched_user")
  @@map("matches")
}

enum Gender {
  HOMEM
  MULHER
  NAO_BINARIO
}

enum SexualOrientation {
  HETERO
  HOMOSSEXUAL
  BI
  PAN
}

enum Role {
  USER
  ADMIN
}
